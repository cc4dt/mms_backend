"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTimeUtc @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeUtc")

""
scalar JSON @scalar(class: "MLL\\GraphQLScalars\\JSON")

type Query {
    me: User @auth

    allUsers(ids: [ID!] @in(key: "id"), level_id: USERLEVEL @eq): [User!]! @all
    paginateusers(ids: [ID!] @in(key: "id"), level_id: USERLEVEL @eq): [User!]! @paginate(defaultCount: 10) # @all
    user(id: ID! @eq): User @find

    userLevels: [ConstField!]! @field(resolver: "MasterQuery@userLevels")
    ticketStatus: [TicketStatus!]! @all
    ticketTypes: [TicketType!]! @all
    ticketTrades: [TicketTrade!]! @all
    ticketPriorities: [TicketPriority!]! @all
}

extend type Query @guard {
    masterEquipment(id: ID! @eq): MasterEquipment @find
    masterEquipmentBySerial(serial: String! @eq): MasterEquipment @find
    allMasterEquipment(equipment_id: ID @eq, station_id: ID @eq): [MasterEquipment!] @all
    paginateMasterEquipment(equipment_id: ID @eq, station_id: ID @eq): [MasterEquipment!] 
     @paginate(defaultCount: 10)
    
    part(id: ID! @eq): Part! @find

    dashboard: Dashboard! @field(resolver: "DashQuery")
    teamleaders: [User!]! @all(scopes: ["teamleaders"])

    ticket(id: ID @eq, number: String @eq): Ticket @find

    tickets(hasStatus: TicketStatuses @scope(name: "hasStatus"), 
        status: String @scope(name: "onStatus"),
        type: TicketTypes @scope(name: "onType")): [Ticket!]! 
     @paginate(defaultCount: 10)
     @orderBy(column: "updated_at", direction: DESC)

    jobs: [Ticket!]!
     @paginate(defaultCount: 10, builder: "App\\Ticket@jobs")
     @orderBy(column: "updated_at", direction: DESC)
     
    state: [State!]! @find
    allStates: [State!]! @all
    paginateStates: [State!]! @paginate(defaultCount: 10)

    equipment(id: ID! @eq): Equipment! @find
    allEquipment: [Equipment!]! @all
    paginateEquipment: [Equipment!]! @paginate(defaultCount: 10)
}

enum TicketStatuses {
    Opened @enum(value: "opened")
    Closed @enum(value: "closed")
    TransferToJob @enum(value: "transfer_to_job")
}

enum TicketTypes {
    Breakdown @enum(value: "breakdown")
    Job @enum(value: "job")
    Corrective @enum(value: "corrective")
}

type SLA {
    key: String!
    name: String!
    count: Int!
    percentage: Float!
}

type StatusReported {
    id: ID!
    name: String!
    count: Int!
    percentage: Float!
}

type TopReported {
    id: ID!
    name: String!
    topCount: Int!
}

type TopReportedStation {
    id: ID!
    name: String!
    topCount: Int!

}

type Dashboard {
    topReported: [TopReported!]!
    topReportedStation: [TopReportedStation!]!
    sla: [SLA!]!
    statusReported: [StatusReported!]!
}

type User {
    id: ID!
    name: String!
    email: String!
    level: ConstField!
    notifications: [Notification!]!  @morphMany(type: PAGINATOR)
    created_at: DateTimeUtc
    updated_at: DateTimeUtc
}

enum USERLEVEL {
  ADMIN @enum(value: 1)
  SUPERVISOR @enum(value: 2)
  TEAMLEADER @enum(value: 3)
  CLIENT @enum(value: 4)
}

type Notification {
    id: ID!
    type: String!
    data: JSON
    read_at: DateTimeUtc
}

type ConstField {
    key: String
    value: String
}

type TicketType {
    id: ID!
    key: String!
    name: String!
}

type TicketTrade {
    id: ID!
    key: String!
    name: String!
}

type TicketPriority {
    id: ID!
    key: String!
    name: String!
}

type TicketStatus {
    id: ID!
    key: String!
    name: String!
}

type TicketTimeline {
    id: ID!
    ticket: Ticket!
    status: TicketStatus!
    description: String
    created_by: User
    updated_by: User
    timestamp: DateTimeUtc
    maintenance_processes: [MaintenanceProcess!]
}

type Ticket {
    id: ID!
    number: String!
    state: State!
    station: Station!
    equipment: Equipment!
    breakdown: Breakdown!
    open_description: String
    type: TicketType
    trade: TicketTrade
    priority: TicketPriority
    work_description: String
    timelines: [TicketTimeline!]! @hasMany @orderBy(column: "timestamp")
    timeline: TicketTimeline!
    status: TicketStatus!
    teamleader: User
    maintenance_processes: [MaintenanceProcess!]! @hasMany
    by_client: Boolean!
    created_by: User!
    updated_by: User!
}

type MaintenanceProcess {
    id: ID!
    equipment: Equipment
    master_equipment: MasterEquipment
    part: Part!
    ticket: Ticket!
    details: [MaintenanceDetail!]
}

type MasterEquipment {
    id: ID!
    equipment: Equipment!
    station: Station!
    serial: String
    processes: [MaintenanceProcess!]
    details: [MasterDetail!]
}

type MasterDetail {
    id: ID!
    attribute: Attribute!
    value: String!
}

type Part {
    id: ID!
    name: String!
    equipment: Equipment
    sub_parts: [SubPart!]
    procedures: [MaintenanceProcedure!]
}

type SubPart {
    id: ID!
    name: String!
}

type MaintenanceProcedure {
    id: ID!
    name: String!
    type: ConstField!
    spare_part: SparePart
}

type SparePart {
    id: ID!
    name: String!
    sub_parts: [SpareSubPart!]
}

type SpareSubPart {
    id: ID!
    name: String!
    part: SparePart!
}

type Attribute {
    id: ID!
    name: String!
    type: ConstField!
}

type MaintenanceDetail {
    id: ID!
    sub_part: SubPart
    procedure: MaintenanceProcedure!
    spare_sub_part: SpareSubPart
    value: String!
}

type State {
    id: ID!
    name: String!
    stations: [Station!]!
}

type Station {
    id: ID!
    name: String!
    state: State!
    equipment: [MasterEquipment!]
}

type Equipment {
    id: ID!
    name: String!
    breakdowns: [Breakdown!]!
    attributes: [Attribute!]!
    equipment(station_id: ID @eq): [MasterEquipment!]! @hasMany
    parts: [Part!]!
}

type Breakdown {
    id: ID!
    name: String!
    equipment: Equipment!
}

#########################################################


type Mutation {
    login(input: LoginInput!): Login
        @field(resolver: "AuthMutator@login")
        
    changePassword(old_password: String!, new_password: String!, confirm_password: String!): Boolean!
        @guard
        @field(resolver: "AuthMutator@changePassword")
        
    notificationsAsRead: Boolean!
        @guard
        @field(resolver: "NotificationsMutator@asRead")

    openTicket(input: OpenTicketInput!): Ticket
        @guard
        @field(resolver: "TicketMutator@open")

    assignTicket(id: ID!, input: AssignTicketInput!): Ticket
        @guard
        @field(resolver: "TicketMutator@assign")

    
    receiveTicket(id: ID!, input: ReceiveTicketInput!): Ticket
        @guard
        @field(resolver: "TicketMutator@receive")

    clientApprovalTicket(id: ID!, input: ClientApprovalTicket!): Ticket
        @guard
        @field(resolver: "TicketMutator@client_approval")
    approvalTicket(id: ID!, input: ApprovalTicketInput!): Ticket
        @guard
        @field(resolver: "TicketMutator@approval")
        
    deleteTicket(id: ID!): Ticket @delete
}

input LoginInput {
    email: String!
    password: String!
    fcmToken: String!
    deviceName: String! 
    deviceType: String!
}

input OpenTicketInput {
    state_id: ID!
    station_id: ID!
    equipment_id: ID!
    breakdown_id: ID!
    description: String
    date: DateTimeUtc
}

input AssignTicketInput {
    teamleader_id: ID!
    type_id: ID!
    trade_id: ID!
    priority_id: ID!
    description: String
}

input ReceiveTicketInput {
    status_id: ID
    is_need_spare: Boolean
    description: String
    processes: [ProcessTicketInput!]
}

input ClientApprovalTicket {
    description: String
    is_reversed: Boolean
}

input ApprovalTicketInput {
    description: String
    status_id: ID!
}

input ProcessTicketInput {
    equipment_id: ID!
    master_equipment_id: ID
    part_id: ID!
    details: [DetailTicketInput!]
}

input DetailTicketInput {
    sub_part_id: ID
    procedure_id: ID!
    spare_sub_part_id: ID
    value: String
}

type Login {
    tokenType: String!
    token: String!
    deviceName: String!
    me: User!
}

#################################################

# type Subscription {
#   newTicketOpened(author: ID): Ticket!
# }